{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\nimport { findIndex, countBy, groupBy } from 'lodash';\nimport { MatSnackBar } from '@angular/material';\nlet DashboardComponent = class DashboardComponent {\n  constructor(service, snackBar) {\n    this.service = service;\n    this.snackBar = snackBar;\n    this.buildLabels = [];\n    this.buildData = [];\n    this.deployLabels = [];\n    this.deployData = [];\n    this.buildTimeLabels = [];\n    this.buildTimeData = [];\n    this.branchLabels = [];\n    this.branchSeries = [[], [], []];\n    this.stats = [];\n    this._links = {\n      azure: ['https://azuredevops.wiprodevlite.com/DefaultCollection/DevLite/_workitems/assignedtome/', 'https://azuredevops.wiprodevlite.com/DefaultCollection/DevLite/_dashboards/dashboard/adfdc1b0-9a0f-4765-9ee0-ea59a8956b76', 'https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/0', 'https://portal.azure.com/#@bldcad.onmicrosoft.com/dashboard/arm/subscriptions/5a825fe0-c29b-42cb-9d14-75b5e949a73e/resourcegroups/dashboards/providers/microsoft.portal/dashboards/8eaae5ef-a4a2-4e6c-aebc-f5e71146be8d', 'https://portal.azure.com/#@bldcad.onmicrosoft.com/dashboard/arm/subscriptions/5a825fe0-c29b-42cb-9d14-75b5e949a73e/resourcegroups/dashboards/providers/microsoft.portal/dashboards/8eaae5ef-a4a2-4e6c-aebc-f5e71146be8d', 'https://portal.azure.com/#@bldcad.onmicrosoft.com/dashboard/arm/subscriptions/5a825fe0-c29b-42cb-9d14-75b5e949a73e/resourcegroups/dashboards/providers/microsoft.portal/dashboards/8eaae5ef-a4a2-4e6c-aebc-f5e71146be8d', 'http://azuredevops.wiprodevlite.com/DefaultCollection/DevLite/_analytics' // Process\n      ]\n    };\n\n    this.loading = false;\n    // labels\n    this.labels = {\n      'CurrentBuildsInQueue': 'Builds In Queue',\n      'CurrentBuildsInProgress': 'Builds In Progress',\n      'CanceledBuilds': 'Cancelled Builds',\n      'SuccessfulBuilds': 'Successful Builds',\n      'PartiallySuccessfulBuilds': 'Partially Successful Builds',\n      'FailedBuilds': 'Failed Builds',\n      'FailedDeployments': 'Failed Deployments',\n      'SuccessfulDeployments': 'Successful Deployments',\n      'PartiallySuccessfulDeployments': 'Partially Successful Deployments'\n    };\n  }\n  ngOnInit() {\n    // get ciTool valie\n    let org = JSON.parse(localStorage.getItem('orgData')) || null;\n    let data = org.devWorkbenchInfo;\n    const {\n      ciTool,\n      buName,\n      projectId,\n      projectName\n    } = data;\n    this.ciToolValue = ciTool.value;\n    // get the metrics\n    this.loading = true;\n    this.service.getMetrics().subscribe(response => {\n      if (ciTool.value === 'Azure') {\n        this.pie1Label = 'Build Summary';\n        this.pie2Label = 'Deployment Summary';\n        // build metrics\n        response.metrics.buildMetrics.map(metric => {\n          //console.log(metric);\n          const index = findIndex(this.stats, {\n            type: 'build',\n            title: this.labels[metric.name]\n          });\n          if (index > -1) {\n            this.stats[index].value = this.stats[index].value + metric.intValue;\n          } else {\n            this.stats.push({\n              type: 'build',\n              title: this.labels[metric.name],\n              value: metric.intValue\n            });\n          }\n        });\n        // deploy metrics\n        response.metrics.deployMetrics.map(metric => {\n          //console.log(metric);\n          const index = findIndex(this.stats, {\n            type: 'deployment',\n            title: this.labels[metric.name]\n          });\n          if (index > -1) {\n            this.stats[index].value = this.stats[index].value + metric.value;\n          } else {\n            this.stats.push({\n              type: 'deployment',\n              title: this.labels[metric.name],\n              value: metric.value\n            });\n          }\n        });\n        // repo metrics\n        const repoMetrics = response.metrics.repoMetrics;\n        if (repoMetrics.pullRequestsCompletedCount && repoMetrics.pullRequestsCreatedCount && repoMetrics.commitsPushedCount) {\n          this.stats.push({\n            type: 'repo',\n            title: 'Open Pull Requests',\n            value: repoMetrics.pullRequestsCompletedCount - repoMetrics.pullRequestsCreatedCount\n          });\n          this.stats.push({\n            type: 'repo',\n            title: 'Commit Pushed Count',\n            value: repoMetrics.commitsPushedCount\n          });\n        }\n        // build time\n        this.buildTimeLabels = response.metrics.buildTimeMetrics.map(_time => _time.buildNumber);\n        this.buildTimeData = response.metrics.buildTimeMetrics.filter(_time => _time.timeTaken > 1).map(_time => {\n          return _time.timeTaken;\n        });\n        // calculate build and deploy metrics charts data\n        this.buildLabels = this.stats.filter(stat => stat.type === 'build').map(stat => stat.title);\n        this.buildData = this.stats.filter(stat => stat.type === 'build').map(stat => stat.value);\n        this.deployLabels = this.stats.filter(stat => stat.type === 'deployment').map(stat => stat.title);\n        this.deployData = this.stats.filter(stat => stat.type === 'deployment').map(stat => stat.value);\n      } else if (ciTool.value === 'GitLab') {\n        this.pie1Label = 'Pipeline Summary';\n        this.pie2Label = 'Branch Summary';\n        console.log(response.metrics);\n        const statusCounts = countBy(response.metrics.pipelines, 'status');\n        const branchCounts = countBy(response.metrics.pipelines, 'ref');\n        const minBuildTime = Math.round(response.metrics.minBuildTime) || 0;\n        const maxBuildTime = Math.round(response.metrics.maxBuildTime) || 0;\n        const avgBuildTime = Math.round(response.metrics.avgBuildTime) || 0;\n        this.stats.push({\n          type: 'build',\n          title: 'Total Pipelines',\n          value: response.metrics.totalPipelines\n        });\n        this.stats.push({\n          type: 'build',\n          title: 'Successful Builds',\n          value: statusCounts.success || 0\n        });\n        this.stats.push({\n          type: 'build',\n          title: 'Cancelled Builds',\n          value: statusCounts.canceled || 0\n        });\n        this.stats.push({\n          type: 'build',\n          title: 'Failed Builds',\n          value: statusCounts.failed || 0\n        });\n        this.stats.push({\n          type: 'deployment',\n          title: 'Minimum Build Time',\n          value: minBuildTime,\n          suffix: 's'\n        });\n        this.stats.push({\n          type: 'deployment',\n          title: 'Maximum Build Time',\n          value: maxBuildTime,\n          suffix: 's'\n        });\n        this.stats.push({\n          type: 'deployment',\n          title: 'Average Build Time',\n          value: avgBuildTime,\n          suffix: 's'\n        });\n        Object.keys(branchCounts).forEach(key => {\n          this.stats.push({\n            type: 'repo',\n            title: `Pipelines - ${key}`,\n            value: branchCounts[key] || 0\n          });\n        });\n        // calculate build and deploy metrics charts data\n        this.buildLabels = this.stats.filter(stat => stat.type === 'build').map(stat => stat.title);\n        this.buildData = this.stats.filter(stat => stat.type === 'build').map(stat => stat.value);\n        this.deployLabels = this.stats.filter(stat => stat.type === 'repo').map(stat => stat.title);\n        this.deployData = this.stats.filter(stat => stat.type === 'repo').map(stat => stat.value);\n        const branchSeriesGroup = groupBy(response.metrics.pipelines, 'ref');\n        Object.keys(branchSeriesGroup).forEach(key => {\n          this.branchLabels.push(key);\n          var min = -1,\n            max = -1,\n            avg = 0,\n            total = 0,\n            count = 0;\n          branchSeriesGroup[key].forEach(pipeline => {\n            total = total + pipeline.buildTime;\n            if (min === -1) {\n              min = pipeline.buildTime;\n              max = pipeline.buildTime;\n            }\n            if (pipeline.buildTime < min) {\n              min = pipeline.buildTime;\n            }\n            if (pipeline.buildTime > max) {\n              max = pipeline.buildTime;\n            }\n            count++;\n          });\n          console.log(total, count);\n          avg = Math.round(total / count);\n          console.log(min, max, avg);\n          this.branchSeries[0].push(min);\n          this.branchSeries[1].push(max);\n          this.branchSeries[2].push(avg);\n        });\n      }\n      this.loading = false;\n      //console.log(this.stats);\n    }, err => {\n      console.log('Error ', err);\n      this.loading = false;\n      this.showError('Unable to get metrics - ' + err.error.message, 'RETRY');\n    });\n    switch (ciTool.value) {\n      case 'Azure':\n        this.links = this._links.azure;\n        break;\n      case 'GitLab':\n        const bu = buName && buName !== \"\" ? buName : 'root';\n        const pName = projectName.trim();\n        this.links = [`https://52.7.33.92/${bu}/${pName}/-/analytics/issues_analytics`, `https://52.7.33.92/${bu}/${pName}/pipelines/charts`, `https://52.7.33.92/${bu}/${pName}/-/security/dashboard/?project_id=${projectId}&scope=dismissed&page=1&days=90`, `https://52.7.33.92/${bu}/${pName}/-/environments/${projectId}/metrics`, `https://52.7.33.92/${bu}/${pName}/-/environments/${projectId}/metrics`, `https://52.7.33.92/${bu}/${pName}/-/environments/${projectId}/metrics`, `https://52.7.33.92/${bu}/${pName}/-/value_stream_analytics`];\n        break;\n      default:\n        this.links = ['', '', '', '', '', '', ''];\n        break;\n    }\n  }\n  showError(errorMessage, action) {\n    this.snackBar.open(errorMessage, action, {\n      duration: 2000\n    });\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n}), __metadata(\"design:paramtypes\", [UserService, typeof (_a = typeof MatSnackBar !== \"undefined\" && MatSnackBar) === \"function\" ? _a : Object])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}