{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\nimport { find, findIndex } from 'lodash';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nexport let OrgadminComponent = class OrgadminComponent {\n  constructor(service, snackBar, router) {\n    this.service = service;\n    this.snackBar = snackBar;\n    this.router = router;\n    this.org = JSON.parse(localStorage.getItem('orgData')) || null;\n    this.defaultData = null;\n    this.configValues = JSON.parse(localStorage.getItem('uiconfig')) || null;\n    this.showPassword = {};\n    this.service.defaultConfig.subscribe(_defaultData => {\n      this.defaultData = _defaultData;\n    });\n    this.users = this.service.orgUsers;\n  }\n  ngOnInit() {}\n  selectBU(buName) {\n    this.businessUnit = this.org.businessUnits.filter(bu => bu.name === buName)[0];\n    this.selectedBU = buName;\n    this.products = this.businessUnit.products;\n  }\n  selectProduct(pName) {\n    this.selectedProduct = pName;\n    this.releases = this.products.filter(p => p.name === pName)[0].releases;\n  }\n  addUser() {\n    this.service.createOrgUser(this.username, this.password).subscribe(data => {\n      if (this.users) {\n        this.users.push({\n          username: this.username\n        });\n      } else {\n        this.users = [{\n          username: this.username\n        }];\n      }\n      this.username = '';\n    }, err => {\n      console.log('Error ', err);\n      this.showError('Unable to save details', 'RETRY');\n    });\n  }\n  deleteUser(user) {\n    this.service.deleteOrgUser(user._id).subscribe(data => {\n      const index = findIndex(this.users, {\n        _id: user._id\n      });\n      this.users.splice(index, 1);\n      this.service.orgUsers = this.users;\n    }, err => {\n      console.log('Error ', err);\n      this.showError('Unable to delete user', 'RETRY');\n    });\n  }\n  addBU() {\n    this.org.businessUnits.push({\n      name: this.bu\n    });\n    this.bu = '';\n  }\n  deleteBU(buName) {\n    const index = findIndex(this.org.businessUnits, {\n      name: buName\n    });\n    this.org.businessUnits.splice(index, 1);\n    this.selectedBU = null;\n    this.businessUnit = null;\n  }\n  addProduct() {\n    if (this.products) {\n      this.products.push({\n        name: this.product\n      });\n    } else {\n      this.businessUnit.products = [{\n        name: this.product\n      }];\n      this.products = this.businessUnit.products;\n    }\n    this.product = '';\n  }\n  deleteProduct(pName) {\n    const index = findIndex(this.products, {\n      name: pName\n    });\n    this.products.splice(index, 1);\n  }\n  addRelease() {\n    if (this.releases) {\n      this.releases.push({\n        name: this.releaseName,\n        version: this.version\n      });\n    } else {\n      var product = find(this.products, {\n        name: this.selectedProduct\n      });\n      product.releases = [{\n        name: this.releaseName,\n        version: this.version\n      }];\n      this.releases = product.releases;\n    }\n    this.releaseName = '';\n    this.version = '';\n  }\n  deleteRelease(name, version) {\n    const index = findIndex(this.releases, {\n      name,\n      version\n    });\n    this.releases.splice(index, 1);\n  }\n  showError(errorMessage, action) {\n    this.snackBar.open(errorMessage, action, {\n      duration: 2000\n    });\n  }\n  setToolInfo(group, tool, value) {\n    this.org[group][tool].value = value;\n    this.org[group][tool].deployment = '';\n    this.org[group][tool].license = '';\n    this.org[group][tool].username = '';\n    this.org[group][tool].url = '';\n    this.org[group][tool].certificate = '';\n    this.org[group][tool].password = '';\n  }\n  updateOrg() {\n    if (this.org.businessUnits.length <= 0 || !(this.org.businessUnits[0].products && this.org.businessUnits[0].products.length > 0) || !(this.org.businessUnits[0].products[0].releases && this.org.businessUnits[0].products[0].releases.length > 0)) {\n      this.showError('Please define atleast one business unit with a product and release.', 'RETRY');\n      return;\n    }\n    this.service.updateOrgDetails(this.org).subscribe(data => {\n      this.org = data.doc;\n      localStorage.setItem(\"orgData\", JSON.stringify(this.org));\n      this.showError('Organization information updated successfully. ', 'OK');\n      // navigate to orchestrate\n      setTimeout(() => this.router.navigate([\"/home/orchestrate\"]), 3000);\n    }, err => {\n      console.log('Error ', err);\n      this.showError('Unable to save details', 'RETRY');\n    });\n  }\n};\nOrgadminComponent = __decorate([Component({\n  selector: 'app-orgadmin',\n  templateUrl: './orgadmin.component.html',\n  styleUrls: ['./orgadmin.component.scss']\n}), __metadata(\"design:paramtypes\", [UserService, typeof (_a = typeof MatSnackBar !== \"undefined\" && MatSnackBar) === \"function\" ? _a : Object, typeof (_b = typeof Router !== \"undefined\" && Router) === \"function\" ? _b : Object])], OrgadminComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}