{"ast":null,"code":"import { ElementRef } from \"@angular/core\";\nimport { Chart } from \"chart.js\";\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"myChart\"];\nexport let StackedBarlinechartComponent = /*#__PURE__*/(() => {\n  class StackedBarlinechartComponent {\n    constructor() {}\n    createChart() {\n      this.chart = new Chart(this.chartView.nativeElement, {\n        type: \"horizontalBar\",\n        data: {\n          labels: this.labelSeries,\n          datasets: [{\n            type: \"horizontalBar\",\n            label: \"Minimum\",\n            backgroundColor: \"#ff572295\",\n            data: this.dataSeries1,\n            order: 1\n          }, {\n            type: \"horizontalBar\",\n            label: \"Average\",\n            backgroundColor: \"#33b96d95\",\n            data: this.lineSeries,\n            order: 2\n          }, {\n            type: \"horizontalBar\",\n            label: \"Maximum\",\n            backgroundColor: \"#2196f395\",\n            data: this.dataSeries2,\n            order: 3\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          legend: {\n            display: true,\n            labels: {\n              fontFamily: 'Open Sans'\n            }\n          },\n          layout: {\n            padding: {\n              left: 30,\n              right: 30,\n              top: 10,\n              bottom: 30\n            }\n          },\n          tooltips: {\n            titleFontFamily: \"Open Sans\",\n            titleFontSize: 17,\n            bodyFontSize: 15,\n            bodyFontFamily: \"Open Sans\"\n          },\n          scales: {\n            xAxes: [{\n              display: true,\n              stacked: true,\n              ticks: {\n                fontFamily: \"Open Sans\",\n                min: 0\n              },\n              gridLines: {\n                display: false\n              }\n            }],\n            yAxes: [{\n              display: true,\n              stacked: true,\n              ticks: {\n                fontFamily: \"Open Sans\"\n              },\n              gridLines: {\n                display: true\n              }\n            }]\n          }\n        }\n      });\n    }\n    ngOnInit() {\n      this.createChart();\n    }\n    static #_ = this.ɵfac = function StackedBarlinechartComponent_Factory(t) {\n      return new (t || StackedBarlinechartComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: StackedBarlinechartComponent,\n      selectors: [[\"app-stacked-barlinechart\"]],\n      viewQuery: function StackedBarlinechartComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartView = _t.first);\n        }\n      },\n      inputs: {\n        chartId: \"chartId\",\n        title: \"title\",\n        dataSeries1: \"dataSeries1\",\n        dataSeries2: \"dataSeries2\",\n        lineSeries: \"lineSeries\",\n        labelSeries: \"labelSeries\",\n        themeColor: \"themeColor\"\n      },\n      decls: 5,\n      vars: 2,\n      consts: [[1, \"wrapper\"], [3, \"id\"], [\"myChart\", \"\"]],\n      template: function StackedBarlinechartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\");\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"canvas\", 1, 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.title);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"id\", ctx.chartId);\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{width:100%;height:100%}.wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center}\"]\n    });\n  }\n  return StackedBarlinechartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}