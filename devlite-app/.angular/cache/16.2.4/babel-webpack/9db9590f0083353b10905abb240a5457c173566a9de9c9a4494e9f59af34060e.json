{"ast":null,"code":"import { HttpHeaders, HttpClient } from \"@angular/common/http\";\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    get orgUsers() {\n      return this._orgUsers;\n    }\n    set orgUsers(users) {\n      this._orgUsers = users;\n      localStorage.setItem(\"orgUsers\", JSON.stringify(users));\n    }\n    set defaultConfiguration(_value) {\n      this._defaultConfig.next(_value);\n    }\n    get defaultConfig() {\n      return this._defaultConfig.asObservable();\n    }\n    login(username, password, source) {\n      this.sourceRoute = source || \"1\";\n      localStorage.setItem(\"sourceRoute\", this.sourceRoute);\n      return this.http.post(\"/api/v3/org/user/login\", {\n        username,\n        password\n      }, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: \"my-auth-token\"\n        })\n      });\n    }\n    logout() {\n      this.loginStatus = false;\n      this.userRole = null;\n      this.token = null;\n      this.sourceRoute = null;\n      this._orgUsers = null;\n      localStorage.removeItem(\"loginStatus\");\n      localStorage.removeItem(\"userdata\");\n      localStorage.removeItem(\"uiconfig\");\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"username\");\n      localStorage.removeItem(\"sourceRoute\");\n      localStorage.removeItem(\"orgData\");\n      localStorage.removeItem(\"orgUsers\");\n    }\n    createUserDetails(data) {\n      this.loginStatus = true;\n      this.token = data.token;\n      this.userName = data.username;\n      this.userRole = data.role;\n      this.orgId = data.orgId;\n      localStorage.setItem(\"loginStatus\", \"true\");\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"username\", data.username);\n      localStorage.setItem(\"userRole\", data.role);\n      localStorage.setItem(\"orgId\", data.orgId);\n      localStorage.setItem(\"uiconfig\", JSON.stringify(data.configuration));\n      localStorage.setItem(\"defaultPrescriptive\", JSON.stringify(data.defaultPrescriptive));\n      localStorage.setItem(\"orgData\", JSON.stringify(data.org));\n      localStorage.setItem(\"orgUsers\", JSON.stringify(data.users));\n      this._orgUsers = data.users;\n      this.defaultConfiguration = data.defaultPrescriptive;\n    }\n    get isLoggedIn() {\n      return this.loginStatus;\n    }\n    get role() {\n      return this.userRole;\n    }\n    get source() {\n      return this.sourceRoute;\n    }\n    get username() {\n      return this.userName;\n    }\n    get apiToken() {\n      return this.token;\n    }\n    proxyApi() {\n      return this.http.post(\"/api/v3/proxy\", {}, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: this.apiToken\n        })\n      });\n    }\n    getMetrics() {\n      return this.http.get(\"/api/v3/proxy/metrics\", {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: this.apiToken\n        })\n      });\n    }\n    getRepos() {\n      return this.http.get(\"/api/v3/proxy/repos\", {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: this.apiToken\n        })\n      });\n    }\n    getOrgDetails() {\n      return this.http.get(`/api/v3/org/${this.orgId}`, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: this.apiToken\n        })\n      });\n    }\n    updateOrgDetails(data) {\n      return this.http.put(`/api/v3/org/${this.orgId}`, data, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: this.apiToken\n        })\n      });\n    }\n    createOrgUser(username, password) {\n      return this.http.post(`/api/v3/org/${this.orgId}/user`, {\n        username,\n        password\n      }, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: this.apiToken\n        })\n      });\n    }\n    deleteOrgUser(userId) {\n      return this.http.delete(`/api/v3/org/${this.orgId}/user/${userId}`, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\",\n          Authorization: this.apiToken\n        })\n      });\n    }\n    constructor(http) {\n      this.http = http;\n      this._initialDefaultConfig = JSON.parse(localStorage.getItem(\"defaultPrescriptive\"));\n      this._defaultConfig = new BehaviorSubject(this._initialDefaultConfig);\n      this.loginStatus = JSON.parse(localStorage.getItem(\"loginStatus\") || \"false\");\n      this.userRole = localStorage.getItem(\"userRole\") || null;\n      this.token = localStorage.getItem(\"token\") || null;\n      this.userName = localStorage.getItem(\"username\") || null;\n      this.orgId = localStorage.getItem(\"orgId\") || null;\n      this.sourceRoute = localStorage.getItem(\"sourceRoute\") || null;\n      this._orgUsers = JSON.parse(localStorage.getItem(\"orgUsers\")) || null;\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}