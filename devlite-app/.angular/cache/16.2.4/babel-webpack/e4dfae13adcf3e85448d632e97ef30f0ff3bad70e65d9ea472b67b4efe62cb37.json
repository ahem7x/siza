{"ast":null,"code":"import { UserService } from 'src/app/services/user.service';\nimport { findIndex, countBy, groupBy } from 'lodash';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/user.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/grid-list\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/progress-bar\";\nimport * as i8 from \"@angular/material/list\";\nimport * as i9 from \"@angular/material/divider\";\nimport * as i10 from \"../piechart/piechart.component\";\nimport * as i11 from \"../barchart/barchart.component\";\nimport * as i12 from \"../stacked-barlinechart/stacked-barlinechart.component\";\nfunction DashboardComponent_mat_progress_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-bar\", 3);\n  }\n}\nfunction DashboardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"div\");\n    i0.ɵɵelementStart(2, \"button\", 5);\n    i0.ɵɵtext(3, \"Onboard to EDOC\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 6)(2, \"h4\");\n    i0.ɵɵtext(3, \"SUMMARY VIEW\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"h4\");\n    i0.ɵɵtext(5, \"DETAILED VIEW\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function (a0, a1, a2) {\n  return {\n    build: a0,\n    deployment: a1,\n    repo: a2\n  };\n};\nfunction DashboardComponent_div_3_mat_grid_tile_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 22)(1, \"div\", 23)(2, \"div\", 24);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 25);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const stat_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(4, _c0, stat_r7.type === \"build\", stat_r7.type === \"deployment\", stat_r7.type === \"repo\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", stat_r7.title, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", stat_r7.value, \"\", stat_r7.suffix, \"\");\n  }\n}\nfunction DashboardComponent_div_3_mat_grid_tile_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 26);\n    i0.ɵɵelement(1, \"app-barchart\", 27);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"labelSeries\", ctx_r5.buildTimeLabels)(\"dataSeries\", ctx_r5.buildTimeData);\n  }\n}\nfunction DashboardComponent_div_3_mat_grid_tile_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 26);\n    i0.ɵɵelement(1, \"app-stacked-barlinechart\", 28);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"labelSeries\", ctx_r6.branchLabels)(\"dataSeries1\", ctx_r6.branchSeries[0])(\"dataSeries2\", ctx_r6.branchSeries[1])(\"lineSeries\", ctx_r6.branchSeries[2]);\n  }\n}\nfunction DashboardComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8)(2, \"mat-grid-list\", 9);\n    i0.ɵɵtemplate(3, DashboardComponent_div_3_mat_grid_tile_3_Template, 6, 8, \"mat-grid-tile\", 10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 11)(5, \"mat-grid-list\", 12)(6, \"mat-grid-tile\", 13);\n    i0.ɵɵelement(7, \"app-piechart\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-grid-tile\", 13);\n    i0.ɵɵelement(9, \"app-piechart\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-grid-tile\", 16)(11, \"div\", 17)(12, \"mat-list\")(13, \"mat-list-item\")(14, \"a\", 18)(15, \"mat-icon\", 19);\n    i0.ɵɵtext(16, \"link\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17, \" Agile Statistics \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(18, \"mat-divider\");\n    i0.ɵɵelementStart(19, \"mat-list-item\")(20, \"a\", 18)(21, \"mat-icon\", 19);\n    i0.ɵɵtext(22, \"link\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(23, \" DevTest Status \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(24, \"mat-divider\");\n    i0.ɵɵelementStart(25, \"mat-list-item\")(26, \"a\", 18)(27, \"mat-icon\", 19);\n    i0.ɵɵtext(28, \"link\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(29, \" Security Measures \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(30, \"mat-divider\");\n    i0.ɵɵelementStart(31, \"div\", 20);\n    i0.ɵɵtext(32, \"Operational Statistics\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"mat-list-item\")(34, \"a\", 18)(35, \"mat-icon\", 19);\n    i0.ɵɵtext(36, \"call_made\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(37, \" Infra \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(38, \"mat-list-item\")(39, \"a\", 18)(40, \"mat-icon\", 19);\n    i0.ɵɵtext(41, \"call_made\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(42, \" Apps \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"mat-list-item\")(44, \"a\", 18)(45, \"mat-icon\", 19);\n    i0.ɵɵtext(46, \"call_made\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(47, \" Containers \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(48, \"mat-divider\");\n    i0.ɵɵelementStart(49, \"mat-list-item\")(50, \"a\", 18)(51, \"mat-icon\", 19);\n    i0.ɵɵtext(52, \"link\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(53, \" Process Metrics \");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵtemplate(54, DashboardComponent_div_3_mat_grid_tile_54_Template, 2, 2, \"mat-grid-tile\", 21);\n    i0.ɵɵtemplate(55, DashboardComponent_div_3_mat_grid_tile_55_Template, 2, 4, \"mat-grid-tile\", 21);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.stats);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"title\", ctx_r3.pie1Label)(\"labelSeries\", ctx_r3.buildLabels)(\"dataSeries\", ctx_r3.buildData);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"title\", ctx_r3.pie2Label)(\"labelSeries\", ctx_r3.deployLabels)(\"dataSeries\", ctx_r3.deployData);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r3.links[0], i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(6);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r3.links[1], i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(6);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r3.links[2], i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(8);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r3.links[3], i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r3.links[4], i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r3.links[5], i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(6);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r3.links[6], i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.ciToolValue === \"Azure\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.ciToolValue === \"GitLab\");\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(service, snackBar) {\n      this.service = service;\n      this.snackBar = snackBar;\n      this.buildLabels = [];\n      this.buildData = [];\n      this.deployLabels = [];\n      this.deployData = [];\n      this.buildTimeLabels = [];\n      this.buildTimeData = [];\n      this.branchLabels = [];\n      this.branchSeries = [[], [], []];\n      this.stats = [];\n      this._links = {\n        azure: ['https://azuredevops.wiprodevlite.com/DefaultCollection/DevLite/_workitems/assignedtome/', 'https://azuredevops.wiprodevlite.com/DefaultCollection/DevLite/_dashboards/dashboard/adfdc1b0-9a0f-4765-9ee0-ea59a8956b76', 'https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/0', 'https://portal.azure.com/#@bldcad.onmicrosoft.com/dashboard/arm/subscriptions/5a825fe0-c29b-42cb-9d14-75b5e949a73e/resourcegroups/dashboards/providers/microsoft.portal/dashboards/8eaae5ef-a4a2-4e6c-aebc-f5e71146be8d', 'https://portal.azure.com/#@bldcad.onmicrosoft.com/dashboard/arm/subscriptions/5a825fe0-c29b-42cb-9d14-75b5e949a73e/resourcegroups/dashboards/providers/microsoft.portal/dashboards/8eaae5ef-a4a2-4e6c-aebc-f5e71146be8d', 'https://portal.azure.com/#@bldcad.onmicrosoft.com/dashboard/arm/subscriptions/5a825fe0-c29b-42cb-9d14-75b5e949a73e/resourcegroups/dashboards/providers/microsoft.portal/dashboards/8eaae5ef-a4a2-4e6c-aebc-f5e71146be8d', 'http://azuredevops.wiprodevlite.com/DefaultCollection/DevLite/_analytics' // Process\n        ]\n      };\n\n      this.loading = false;\n      // labels\n      this.labels = {\n        'CurrentBuildsInQueue': 'Builds In Queue',\n        'CurrentBuildsInProgress': 'Builds In Progress',\n        'CanceledBuilds': 'Cancelled Builds',\n        'SuccessfulBuilds': 'Successful Builds',\n        'PartiallySuccessfulBuilds': 'Partially Successful Builds',\n        'FailedBuilds': 'Failed Builds',\n        'FailedDeployments': 'Failed Deployments',\n        'SuccessfulDeployments': 'Successful Deployments',\n        'PartiallySuccessfulDeployments': 'Partially Successful Deployments'\n      };\n    }\n    ngOnInit() {\n      // get ciTool valie\n      let org = JSON.parse(localStorage.getItem('orgData')) || null;\n      let data = org.devWorkbenchInfo;\n      const {\n        ciTool,\n        buName,\n        projectId,\n        projectName\n      } = data;\n      this.ciToolValue = ciTool.value;\n      // get the metrics\n      this.loading = true;\n      this.service.getMetrics().subscribe(response => {\n        if (ciTool.value === 'Azure') {\n          this.pie1Label = 'Build Summary';\n          this.pie2Label = 'Deployment Summary';\n          // build metrics\n          response.metrics.buildMetrics.map(metric => {\n            //console.log(metric);\n            const index = findIndex(this.stats, {\n              type: 'build',\n              title: this.labels[metric.name]\n            });\n            if (index > -1) {\n              this.stats[index].value = this.stats[index].value + metric.intValue;\n            } else {\n              this.stats.push({\n                type: 'build',\n                title: this.labels[metric.name],\n                value: metric.intValue\n              });\n            }\n          });\n          // deploy metrics\n          response.metrics.deployMetrics.map(metric => {\n            //console.log(metric);\n            const index = findIndex(this.stats, {\n              type: 'deployment',\n              title: this.labels[metric.name]\n            });\n            if (index > -1) {\n              this.stats[index].value = this.stats[index].value + metric.value;\n            } else {\n              this.stats.push({\n                type: 'deployment',\n                title: this.labels[metric.name],\n                value: metric.value\n              });\n            }\n          });\n          // repo metrics\n          const repoMetrics = response.metrics.repoMetrics;\n          if (repoMetrics.pullRequestsCompletedCount && repoMetrics.pullRequestsCreatedCount && repoMetrics.commitsPushedCount) {\n            this.stats.push({\n              type: 'repo',\n              title: 'Open Pull Requests',\n              value: repoMetrics.pullRequestsCompletedCount - repoMetrics.pullRequestsCreatedCount\n            });\n            this.stats.push({\n              type: 'repo',\n              title: 'Commit Pushed Count',\n              value: repoMetrics.commitsPushedCount\n            });\n          }\n          // build time\n          this.buildTimeLabels = response.metrics.buildTimeMetrics.map(_time => _time.buildNumber);\n          this.buildTimeData = response.metrics.buildTimeMetrics.filter(_time => _time.timeTaken > 1).map(_time => {\n            return _time.timeTaken;\n          });\n          // calculate build and deploy metrics charts data\n          this.buildLabels = this.stats.filter(stat => stat.type === 'build').map(stat => stat.title);\n          this.buildData = this.stats.filter(stat => stat.type === 'build').map(stat => stat.value);\n          this.deployLabels = this.stats.filter(stat => stat.type === 'deployment').map(stat => stat.title);\n          this.deployData = this.stats.filter(stat => stat.type === 'deployment').map(stat => stat.value);\n        } else if (ciTool.value === 'GitLab') {\n          this.pie1Label = 'Pipeline Summary';\n          this.pie2Label = 'Branch Summary';\n          console.log(response.metrics);\n          const statusCounts = countBy(response.metrics.pipelines, 'status');\n          const branchCounts = countBy(response.metrics.pipelines, 'ref');\n          const minBuildTime = Math.round(response.metrics.minBuildTime) || 0;\n          const maxBuildTime = Math.round(response.metrics.maxBuildTime) || 0;\n          const avgBuildTime = Math.round(response.metrics.avgBuildTime) || 0;\n          this.stats.push({\n            type: 'build',\n            title: 'Total Pipelines',\n            value: response.metrics.totalPipelines\n          });\n          this.stats.push({\n            type: 'build',\n            title: 'Successful Builds',\n            value: statusCounts.success || 0\n          });\n          this.stats.push({\n            type: 'build',\n            title: 'Cancelled Builds',\n            value: statusCounts.canceled || 0\n          });\n          this.stats.push({\n            type: 'build',\n            title: 'Failed Builds',\n            value: statusCounts.failed || 0\n          });\n          this.stats.push({\n            type: 'deployment',\n            title: 'Minimum Build Time',\n            value: minBuildTime,\n            suffix: 's'\n          });\n          this.stats.push({\n            type: 'deployment',\n            title: 'Maximum Build Time',\n            value: maxBuildTime,\n            suffix: 's'\n          });\n          this.stats.push({\n            type: 'deployment',\n            title: 'Average Build Time',\n            value: avgBuildTime,\n            suffix: 's'\n          });\n          Object.keys(branchCounts).forEach(key => {\n            this.stats.push({\n              type: 'repo',\n              title: `Pipelines - ${key}`,\n              value: branchCounts[key] || 0\n            });\n          });\n          // calculate build and deploy metrics charts data\n          this.buildLabels = this.stats.filter(stat => stat.type === 'build').map(stat => stat.title);\n          this.buildData = this.stats.filter(stat => stat.type === 'build').map(stat => stat.value);\n          this.deployLabels = this.stats.filter(stat => stat.type === 'repo').map(stat => stat.title);\n          this.deployData = this.stats.filter(stat => stat.type === 'repo').map(stat => stat.value);\n          const branchSeriesGroup = groupBy(response.metrics.pipelines, 'ref');\n          Object.keys(branchSeriesGroup).forEach(key => {\n            this.branchLabels.push(key);\n            var min = -1,\n              max = -1,\n              avg = 0,\n              total = 0,\n              count = 0;\n            branchSeriesGroup[key].forEach(pipeline => {\n              total = total + pipeline.buildTime;\n              if (min === -1) {\n                min = pipeline.buildTime;\n                max = pipeline.buildTime;\n              }\n              if (pipeline.buildTime < min) {\n                min = pipeline.buildTime;\n              }\n              if (pipeline.buildTime > max) {\n                max = pipeline.buildTime;\n              }\n              count++;\n            });\n            console.log(total, count);\n            avg = Math.round(total / count);\n            console.log(min, max, avg);\n            this.branchSeries[0].push(min);\n            this.branchSeries[1].push(max);\n            this.branchSeries[2].push(avg);\n          });\n        }\n        this.loading = false;\n        //console.log(this.stats);\n      }, err => {\n        console.log('Error ', err);\n        this.loading = false;\n        this.showError('Unable to get metrics - ' + err.error.message, 'RETRY');\n      });\n      switch (ciTool.value) {\n        case 'Azure':\n          this.links = this._links.azure;\n          break;\n        case 'GitLab':\n          const bu = buName && buName !== \"\" ? buName : 'root';\n          const pName = projectName.trim();\n          this.links = [`https://52.7.33.92/${bu}/${pName}/-/analytics/issues_analytics`, `https://52.7.33.92/${bu}/${pName}/pipelines/charts`, `https://52.7.33.92/${bu}/${pName}/-/security/dashboard/?project_id=${projectId}&scope=dismissed&page=1&days=90`, `https://52.7.33.92/${bu}/${pName}/-/environments/${projectId}/metrics`, `https://52.7.33.92/${bu}/${pName}/-/environments/${projectId}/metrics`, `https://52.7.33.92/${bu}/${pName}/-/environments/${projectId}/metrics`, `https://52.7.33.92/${bu}/${pName}/-/value_stream_analytics`];\n          break;\n        default:\n          this.links = ['', '', '', '', '', '', ''];\n          break;\n      }\n    }\n    showError(errorMessage, action) {\n      this.snackBar.open(errorMessage, action, {\n        duration: 2000\n      });\n    }\n    static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 4,\n      vars: 4,\n      consts: [[\"mode\", \"indeterminate\", \"style\", \"width: 100%;\", 4, \"ngIf\"], [\"class\", \"titleRow\", 4, \"ngIf\"], [\"class\", \"wrapper\", 4, \"ngIf\"], [\"mode\", \"indeterminate\", 2, \"width\", \"100%\"], [1, \"titleRow\"], [\"mat-flat-button\", \"\", \"color\", \"primary\"], [2, \"flex\", \"1\", \"text-align\", \"center\"], [1, \"wrapper\"], [1, \"tiles\"], [\"cols\", \"3\", \"rowHeight\", \"140px\", \"gutterSize\", \"8px\"], [\"class\", \"mat-elevation-z4\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"content\"], [\"cols\", \"8\", \"rowHeight\", \"140px\", \"gutterSize\", \"8px\"], [\"rowspan\", \"2\", \"colspan\", \"3\"], [\"chartId\", \"bs\", 3, \"title\", \"labelSeries\", \"dataSeries\"], [\"chartId\", \"ds\", 3, \"title\", \"labelSeries\", \"dataSeries\"], [\"rowspan\", \"4\", \"colspan\", \"2\", 2, \"background\", \"#ffffff\"], [1, \"links\"], [\"target\", \"_blank\", 3, \"href\"], [\"matListIcon\", \"\", \"color\", \"primary\"], [\"mat-subheader\", \"\"], [\"rowspan\", \"2\", \"colspan\", \"6\", \"style\", \"background: #ffffff;\", 4, \"ngIf\"], [1, \"mat-elevation-z4\", 3, \"ngClass\"], [1, \"metric\"], [1, \"title\"], [1, \"value\"], [\"rowspan\", \"2\", \"colspan\", \"6\", 2, \"background\", \"#ffffff\"], [\"chartId\", \"bt\", \"title\", \"Build Time (seconds)\", \"themeColor\", \"#33b96d\", 3, \"labelSeries\", \"dataSeries\"], [\"chartId\", \"bt\", \"title\", \"Build Time (seconds)\", 3, \"labelSeries\", \"dataSeries1\", \"dataSeries2\", \"lineSeries\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, DashboardComponent_mat_progress_bar_0_Template, 1, 0, \"mat-progress-bar\", 0);\n          i0.ɵɵtemplate(1, DashboardComponent_div_1_Template, 4, 0, \"div\", 1);\n          i0.ɵɵtemplate(2, DashboardComponent_div_2_Template, 6, 0, \"div\", 1);\n          i0.ɵɵtemplate(3, DashboardComponent_div_3_Template, 56, 16, \"div\", 2);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.MatButton, i5.MatGridList, i5.MatGridTile, i6.MatIcon, i7.MatProgressBar, i8.MatList, i8.MatListItem, i8.MatListSubheaderCssMatStyler, i9.MatDivider, i10.PiechartComponent, i11.BarchartComponent, i12.StackedBarlinechartComponent],\n      styles: [\".titleRow[_ngcontent-%COMP%]{width:100%;display:flex;flex-direction:row;padding-left:12px;justify-content:space-between;align-items:center;margin-bottom:12px}.titleRow[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{padding:0;margin:0}.wrapper[_ngcontent-%COMP%]{display:flex;width:100%;padding-left:12px;height:calc(100% - 60px);flex-direction:row}.wrapper[_ngcontent-%COMP%]   .tiles[_ngcontent-%COMP%]{width:380px}.wrapper[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%]{flex:1;padding-left:12px;height:100%}mat-grid-list[_ngcontent-%COMP%]{min-height:100%}mat-grid-list[_ngcontent-%COMP%]   mat-grid-tile.build[_ngcontent-%COMP%]{background-color:#33b96d;color:#fff}mat-grid-list[_ngcontent-%COMP%]   mat-grid-tile.deployment[_ngcontent-%COMP%]{background-color:#2196f3;color:#fff}mat-grid-list[_ngcontent-%COMP%]   mat-grid-tile.repo[_ngcontent-%COMP%]{background-color:#ff5722;color:#fff}mat-grid-list[_ngcontent-%COMP%]   mat-grid-tile[_ngcontent-%COMP%]{border-radius:8px;background-color:#fff}mat-grid-list[_ngcontent-%COMP%]   mat-grid-tile[_ngcontent-%COMP%]   .metric[_ngcontent-%COMP%]{height:100%;display:flex;flex-direction:column;justify-content:space-between;width:100%}mat-grid-list[_ngcontent-%COMP%]   mat-grid-tile[_ngcontent-%COMP%]   .metric[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{text-transform:uppercase;font-size:11px;padding:12px;word-wrap:break-word}mat-grid-list[_ngcontent-%COMP%]   mat-grid-tile[_ngcontent-%COMP%]   .metric[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{font-weight:700;line-height:32px;font-size:32px;padding:12px}.links[_ngcontent-%COMP%]{width:100%;height:100%}.links[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{padding-top:24px;padding-left:24px}.links[_ngcontent-%COMP%]   mat-list[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;color:#000;text-decoration:none}.links[_ngcontent-%COMP%]   mat-list[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{padding-right:8px}.links[_ngcontent-%COMP%]   mat-list[_ngcontent-%COMP%]   .mat-subheader[_ngcontent-%COMP%]{font-size:12px;font-weight:700;text-transform:uppercase}.links[_ngcontent-%COMP%]   mat-list[_ngcontent-%COMP%]   mat-list-item[_ngcontent-%COMP%]{font-size:12px}\"]\n    });\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}