{"ast":null,"code":"var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\nimport { UserService } from 'src/app/services/user.service';\nexport let IntegrateComponent = class IntegrateComponent {\n  constructor(service, router, snackBar) {\n    this.service = service;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.defaultData = null;\n    this.bundleStart = 0;\n    this.repoStart = 0;\n    this.repos = [];\n    this.filteredRepos = [];\n    this.releaseDeploymentStrategy = \"Big Bang\";\n    this.service.defaultConfig.subscribe(_defaultData => {\n      this.defaultData = _defaultData.integrateConfig;\n    });\n    this.loading = true;\n  }\n  ngOnInit() {\n    this.org = JSON.parse(localStorage.getItem('orgData')) || null;\n    this.data = this.org.devWorkbenchInfo;\n    const _config = JSON.parse(localStorage.getItem('uiconfig')) || null;\n    this.configValues = _config.integrateConfig;\n    this.selectedBundleId = this.data.bundle._id;\n    this.filteredBundles = this.configValues.bundle.slice(this.bundleStart, 12);\n    this.loading = true;\n    this.service.getRepos().subscribe(response => {\n      this.repos = response.repos;\n      this.filteredRepos = this.repos.slice(this.repoStart, 12);\n      this.loading = false;\n    }, err => {\n      console.log('Error ', err);\n      this.loading = false;\n      this.showError('Unable to get projects - ' + err.error.message, 'RETRY');\n    });\n  }\n  showError(errorMessage, action) {\n    this.snackBar.open(errorMessage, action, {\n      duration: 2000\n    });\n  }\n  isRepoSelected(repo) {\n    return this.data.buName === repo.bu && this.data.projectName === repo.projectName && this.data.repository === repo.repository && this.data.branch === repo.branch;\n  }\n  selectRepo(repo) {\n    this.data.gitCodeUrl = repo.repositoryUrl;\n    this.data.branch = repo.branch;\n    // extra\n    this.data.repository = repo.repository;\n    this.data.projectId = repo.projectId;\n    this.data.projectName = repo.projectName;\n    this.data.buId = repo.buId;\n    this.data.buName = repo.bu;\n  }\n  onPageChange(event) {\n    this.bundleStart = 12 * event.pageIndex;\n    this.filteredBundles = this.configValues.bundle.slice(this.bundleStart, this.bundleStart + 12);\n  }\n  onRepoPageChange(event) {\n    this.repoStart = 12 * event.pageIndex;\n    this.filteredRepos = this.repos.slice(this.repoStart, this.repoStart + 12);\n  }\n  saveDetails() {\n    if (!this.data.gitCodeUrl) {\n      this.showError('Git code URL is mandatory!', 'OK');\n      return;\n    }\n    if (!this.data.branch) {\n      this.showError('Branch is mandatory!', 'OK');\n      return;\n    }\n    if (!this.data.bundle) {\n      this.showError('Please select a bundle!', 'OK');\n      return;\n    }\n    // validate environment\n    if (this.data.envType && this.data.envType.length > 0) {\n      if (this.data.envType.includes('Development') && (!this.data.envConfig.devNoInstance || !this.data.envConfig.devTShirtSize)) {\n        this.showError('Instance and environment size is mandatory for each selected environment.', 'OK');\n        return;\n      } else if (this.data.envType.includes('Test') && (!this.data.envConfig.testNoInstance || !this.data.envConfig.testTShirtSize)) {\n        this.showError('Instance and environment size is mandatory for each selected environment.', 'OK');\n        return;\n      } else if (this.data.envType.includes('Staging') && (!this.data.envConfig.stagNoInstance || !this.data.envConfig.stagTShirtSize)) {\n        this.showError('Instance and environment size is mandatory for each selected environment.', 'OK');\n        return;\n      } else if (this.data.envType.includes('Production') && (!this.data.envConfig.prodNoInstance || !this.data.envConfig.prodTShirtSize)) {\n        this.showError('Instance and environment size is mandatory for each selected environment.', 'OK');\n        return;\n      } else {\n        // nothing\n      }\n    } else {\n      this.showError('Please select atleast one environment.', 'OK');\n      return;\n    }\n    this.service.updateOrgDetails(this.org).subscribe(() => {\n      var orgData = JSON.parse(localStorage.getItem('orgData')) || null;\n      orgData.devWorkbenchInfo = this.data;\n      localStorage.setItem('orgData', JSON.stringify(orgData));\n      this.router.navigate(['home/orchestrate']);\n    }, err => {\n      console.log('Error ', err);\n      this.showError('Unable to save details', 'RETRY');\n    });\n  }\n};\nIntegrateComponent = __decorate([Component({\n  selector: 'app-integrate',\n  templateUrl: './integrate.component.html',\n  styleUrls: ['./integrate.component.scss']\n}), __metadata(\"design:paramtypes\", [UserService, typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, typeof (_b = typeof MatSnackBar !== \"undefined\" && MatSnackBar) === \"function\" ? _b : Object])], IntegrateComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}